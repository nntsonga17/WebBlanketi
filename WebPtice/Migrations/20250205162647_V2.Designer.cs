// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace Ptice.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250205162647_V2")]
    partial class V2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.NepoznataPtica", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.HasKey("ID");

                    b.ToTable("Nepoznata");
                });

            modelBuilder.Entity("Models.Osobine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vrednost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Osobine");
                });

            modelBuilder.Entity("Models.Podrucje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Podrucja");
                });

            modelBuilder.Entity("Models.Ptica", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Slika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Ptice");
                });

            modelBuilder.Entity("Models.Vidjena", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BrojVidjenja")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("PodrucjeID")
                        .HasColumnType("int");

                    b.Property<int>("PticaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Vreme")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("PodrucjeID");

                    b.HasIndex("PticaID");

                    b.ToTable("Vidjenja");
                });

            modelBuilder.Entity("NepoznataPticaOsobine", b =>
                {
                    b.Property<int>("NepoznataID")
                        .HasColumnType("int");

                    b.Property<int>("OsobineID")
                        .HasColumnType("int");

                    b.HasKey("NepoznataID", "OsobineID");

                    b.HasIndex("OsobineID");

                    b.ToTable("NepoznataPticaOsobine");
                });

            modelBuilder.Entity("OsobinePtica", b =>
                {
                    b.Property<int>("OsobineID")
                        .HasColumnType("int");

                    b.Property<int>("PticaID")
                        .HasColumnType("int");

                    b.HasKey("OsobineID", "PticaID");

                    b.HasIndex("PticaID");

                    b.ToTable("OsobinePtica");
                });

            modelBuilder.Entity("Models.Vidjena", b =>
                {
                    b.HasOne("Models.Podrucje", "Podrucje")
                        .WithMany("Vidjena")
                        .HasForeignKey("PodrucjeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Ptica", "Ptica")
                        .WithMany("Vidjena")
                        .HasForeignKey("PticaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Podrucje");

                    b.Navigation("Ptica");
                });

            modelBuilder.Entity("NepoznataPticaOsobine", b =>
                {
                    b.HasOne("Models.NepoznataPtica", null)
                        .WithMany()
                        .HasForeignKey("NepoznataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Osobine", null)
                        .WithMany()
                        .HasForeignKey("OsobineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OsobinePtica", b =>
                {
                    b.HasOne("Models.Osobine", null)
                        .WithMany()
                        .HasForeignKey("OsobineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Ptica", null)
                        .WithMany()
                        .HasForeignKey("PticaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Podrucje", b =>
                {
                    b.Navigation("Vidjena");
                });

            modelBuilder.Entity("Models.Ptica", b =>
                {
                    b.Navigation("Vidjena");
                });
#pragma warning restore 612, 618
        }
    }
}
